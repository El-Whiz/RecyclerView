//ALL SONGS
    public static List<PlaylistEntity> getSongList(Context context) {
        List<PlaylistEntity> audioModelList = new ArrayList<PlaylistEntity>();

        Uri collection;
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
            collection = MediaStore.Audio.Media.getContentUri(MediaStore.VOLUME_EXTERNAL);
        } else {
            collection = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;
        }

        String[] projection = new String[] {
                MediaStore.Audio.Media._ID,
                MediaStore.Audio.Media.DISPLAY_NAME,
                MediaStore.Audio.Media.DURATION,
                MediaStore.Audio.Media.SIZE,
                MediaStore.Audio.Media.ALBUM_ARTIST,
                MediaStore.Audio.Media.ARTIST,
                MediaStore.Audio.Media.YEAR,
                MediaStore.Audio.Media.COMPOSER/*,
                MediaStore.Audio.Media.GENRE*/
        };
        String selection = MediaStore.Audio.Media.DURATION +
                " >= 5";

        String[] selectionArgs = new String[] {
                String.valueOf(TimeUnit.MILLISECONDS.convert(5, TimeUnit.MINUTES))
        };

        String sortOrder = MediaStore.Audio.Media.DISPLAY_NAME + " ASC";

        if (context == null)
            return null;

        ContentResolver contentResolver = context.getContentResolver();
        Uri uri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;

        try (Cursor cursor = contentResolver.query(collection, null, null, null, sortOrder)) {
            if (cursor == null) {
                // query failed, handle error.
                Toast.makeText(context, "Failed to sync Media!!", Toast.LENGTH_SHORT).show();
            } else if (!cursor.moveToFirst()) {
                // no media on the device
                Toast.makeText(context, "No audio files found!!", Toast.LENGTH_SHORT).show();
            } else {
                do {

                    int idColumn = cursor.getColumnIndexOrThrow(MediaStore.Audio.Media._ID);
                    int nameColumn = cursor.getColumnIndexOrThrow(MediaStore.Audio.Media.DISPLAY_NAME);
                    int durationColumn = cursor.getColumnIndexOrThrow(MediaStore.Audio.Media.DURATION);
                    int sizeColumn = cursor.getColumnIndexOrThrow(MediaStore.Audio.Media.SIZE);
                    int albumColumn = cursor.getColumnIndexOrThrow(MediaStore.Audio.Media.ALBUM);
                    int artistColumn = cursor.getColumnIndexOrThrow(MediaStore.Audio.Media.ARTIST);
                    int yearColumn = cursor.getColumnIndexOrThrow(MediaStore.Audio.Media.YEAR);
                    int composerColumn = cursor.getColumnIndexOrThrow(MediaStore.Audio.Media.COMPOSER);
                    int albumIdColumn = cursor.getColumnIndexOrThrow(MediaStore.Audio.Media.ALBUM_ID);
//                    int genreColumn = cursor.getColumnIndexOrThrow(MediaStore.Audio.Media.GENRE_KEY);


                    String fullPath = cursor.getString(cursor.getColumnIndex(MediaStore.Audio.Media.DATA));


                    // Get values of columns for a given Audio.
                    long id = cursor.getLong(idColumn);
                    String name = cursor.getString(nameColumn);
                    int duration = cursor.getInt(durationColumn);
                    int size = cursor.getInt(sizeColumn);
                    int album_id = cursor.getInt(albumIdColumn);

                    Uri contentUri = ContentUris.withAppendedId(
                            MediaStore.Audio.Media.INTERNAL_CONTENT_URI, id);

                    String album = cursor.getString(albumColumn);
                    String artist = cursor.getString(artistColumn);
                    String year = cursor.getString(yearColumn);
                    String composer = cursor.getString(composerColumn);

//                    String genre = cursor.getString(genreColumn);

                    String searchData = name + " " + album + " " + artist
                            + " " + year + " " + composer + " " /*+ genre*/;
